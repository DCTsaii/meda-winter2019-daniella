// ALWAYS HAVE THE FS PACKAGE FIRST
var fs = require("fs");

// index 0 and index 1 will ALWAYS exist in the terminal.
var terminalText = process.argv;

var htmlTitle = "My Second Web Page Generated by JavaScript";

// This IF statement is to check if you picked a color in the terminal, if you did not then this code will run displaying the console.log message.
if(terminalText[3] == undefined){
    console.log("There was no color specificed, so the default color white will be used.");
    terminalText[3] == "white";
}

// by using ${terminalText[3]} You're basically pulling the index 3 from the terminal in terminalText and pick a color using the Terminal node. 
var htmlStyle = `
body {
    background-color: ${terminalText[3]}; 
}`;

// this terminalText[4] is a paragraph, to generate the paragraph go to terminal, type the following: node . specialWebpage pink "this is your paragraph, it needs to be inside quotes"
var htmlBody = terminalText[4];


var htmlFileName = terminalText[2]; // this does NOT belong in the html bellow. This is basically to create a file using FS package and having the flexibility to choose the file name/or create extra files by changing the strings. OR create a file using Terminal NODE process.argv by typing the variable terminalText[2] <- index 2 because it always start at 2 because index 0 and 1 ALWAYS exist in the terminal, and run: node . dynamicWebPage <-- file name you wish to call your page.
var html;




html = `
<!doctype html>

<html lang="en">
 <head>
  <meta charset="utf-8">
  <title>${htmlTitle}</title>
  <meta name="description" content="The HTML5 Herald">
  <meta name="author" content="SitePoint">

  <link rel="stylesheet" href="css/styles.css?v=1.0">

  <style>${htmlStyle}</style>

 </head>

 <body>
  ${htmlBody}
 </body>
</html>`;

// To check if you have a file name, write a IF statement. If you don't have a file name, you'll get an error.
// in the IF statement write a variable, in this case is htmlFileName and then add == "", the double equals is to compare.
if (htmlFileName == "" || htmlFileName == undefined) {
console.log("You are missing a file name, cannot continue. Error: 302834u032");
return; 
}

// You can write like this: fs.writeFileSync(htmlFileName + ".html", html, "utf8"); or example bellow:
var fullFileName = htmlFileName + ".html";

// the utf8 in fs.writeFileSync is for the file, unlike in the html template meta charset, which is for the browser.
fs.writeFileSync(htmlFileName + ".html", html, "utf8");
console.log("Generation of HTML file has been completed. Check your folder!")